
% scala
Welcome to Scala 2.12.0 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_101).
Type in expressions for evaluation. Or try :help.

scala> 0
res0: Int = 0

scala> class A
defined class A

scala> class B extends A
defined class B

scala> // This example shows Scala's support for function subtyping

scala> def f(g: A=>B) = g(new A())   // Here f expects a parameter of type A->B
f: (g: A => B)B

scala> def a2a(a: A) = new A()  // a2a is of type a->a
a2a: (a: A)A

scala> def a2b(a: A) = new B()  // a2b is of type a->b
a2b: (a: A)B

scala> def b2a(b: B) = new A()  // b2a is of type b->a
b2a: (b: B)A

scala> def b2b(b: B) = new B()  // b2b is of type b->b
b2b: (b: B)B

scala> // Remember that a->b is a subtype of a->a, b->b, and b->a.

scala> // So, if an a->b function is expected, you can't use a function of any of

scala> // the other types.

scala> f(b2a)    // since f expects an a->b, we shouldn't be able to pass a b->a to it
<console>:14: error: type mismatch;
 found   : A
 required: B
       f(b2a)
         ^

scala> f(b2b)  // we shouldn't be able to pass a b->b when an a->b is expected.
<console>:14: error: type mismatch;
 found   : B => B
 required: A => B
       f(b2b)
         ^

scala> f(a2a)   // we shouldn't be able to pass an a->a when an a->b is expected.
<console>:14: error: type mismatch;
 found   : A
 required: B
       f(a2a)
         ^

scala> f(a2b)  // this should work, of course, to pass an a->b when an a->b is expected
res4: B = B@2a2843ec


scala> Remember that b->a is a superype of a->b, a->a, and b->b.

scala> So if a b->a function is expected, you can use a function of any of the other types.

scala> // Now let's define a function expecting a b->a as a parameter.

scala> def h(g: B=>A) = g(new B())
h: (g: B => A)A

scala> h(b2a)  // It's OK to pass a b->a where an b->a is expected (of course!)
res5: A = A@e9ef5b6

scala> h(b2b)   // It's OK to pass a b->b where an b->a is expected
res6: A = B@4b200971

scala> h(a2a)   // It's OK to pass an a->a where an b->a is expected
res7: A = A@20b9d5d5

scala> h(a2b)   // It's OK to pass an a->b where an b->a is expected
res8: A = B@2a869a16

scala> // lambda expressions in Scala look like  (parameters) => body. For example,

scala> (x:Int, y:Int) => x + y
res1: (Int, Int) => Int = $$Lambda$1074/157004450@46d567cb

scala> ((x:Int, y:Int) => x + y)(3,4)  // Calling a function defined by a lambda expression
res2: Int = 7

scala> // Sometimes the parameter types can be inferred, as in the sample progam lambda.scala

scala> // on the course web site.

scala> // However, if the compiler can't infer the parameter type, you'll need to state it.

scala> (x) => x + 1
<console>:1: error: ';' expected but '=>' found.
(x) => x + 1
    ^

scala> (x:Int) => x + 1
res9: Int => Int = $$Lambda$1162/1864572141@35a60674

scala> // Pattern Matching:  Use the "match" construct as seen below.

scala> // IMPORTANT: The cases are NOT separated by "|".  The "|" you see is printed by the interpreter.

scala> def fac(x:Int):Int = x match {
     | case 0 => 1
     | case n => n * fac(n-1)
     | }
fac: (x: Int)Int

scala> fac(5)
res10: Int = 120

scala> 

scala> class C[T]  // invariantly subtyped generic
defined class C

scala> class A
defined class A

scala> class B extends A 
defined class B

scala> val x: C[A] = new C[A]()   // x is declared to be of type C[A], so obviously
                                  // it can refer to a C[A] object
x: C[A] = C@20e6c4dc

scala> val y: C[A] = new C[B]()   // y is declared to be of type C[A], but cannot
                                  // refer to a C[B] object, since there's no subtyping
                                  // on instances of C[]
<console>:14: error: type mismatch;
 found   : C[B]
 required: C[A]
Note: B <: A, but class C is invariant in type T.
You may wish to define T as +T instead. (SLS 4.5)
       val y: C[A] = new C[B]()
                     ^

scala> class D[+T]   // covariantly subtyped generic
defined class D

scala> 

scala> val z: D[A] = new D[B]()  // z is declared to be of type D[A], but can refer
                                 // to a D[B] object, since D[B] is a subtype of D[A]
z: D[A] = D@56078cea

scala> class E[-T]  //contravariantly subtyped generic
defined class E

scala> val w: E[B] = new E[A]()    // w is declared to be of type E[B], but can refer
                                   // to an E[A] object, since E[A] is a subtype of E[B]

w: E[B] = E@6dfcffb5
//This program illustrates the use in Scala of a "singleton" class, a
//class instantiated by a single object, rather than static members as
//in Java.

//Singleton classes are declared using the "object" keyword.

object Counter {
  var count = 0
  def increment { count = count + 1 }
  def get() = count
  def useCount(f: (Int) => Unit) = f(count)

}


class Foo {

  val x = 12

  var y: Int = 20

  def f(z: Int): Int = x+y+z

//Example of a method whose name is a symbol. There is no special
//syntax for such methods.

  def +(other: Foo) : Int = y + other.y

  def set(w: Int) {
    Counter.increment;  //increment the counter
    y = w;
  }
}


// The main() method is put inside a singleton class.

object Bar {

  def printArg(x: Int) { println("Got the value " + x) }

  def main(args: Array[String]) {
    val o = new Foo();
    o set 17;  // same as o.set(17);
    val p = new Foo();
    p.set(25);
    println(o + p);  //same as o.+(p)
    println("Counter is now " + Counter.get());
    Counter.useCount(printArg)
    Counter.useCount((x:Int) => println(x*1000))
  }
  

}


object Another {

  def main(args: Array[String]) {
    println("Yes");
  }
}


// Illustrates the use of anonymous functions  (like Lambda expressions)
// The syntax is (parameters) => body. You'll generally need to wrap
// it in parentheses.

object lambdaExample {
  def higher(f: (Int) => Int) = f(f(3));
  
  def main(args: Array[String]) = println(higher((x) => x+1))
}

class A
class B extends A

object example {

  def fb(g:B=>String) {
    val b:B = new B
    g(b)
  }

  def fa(g:A=>String) {
    val a:A = new A
    g(a)
  }

  def h(x:A) = x.toString()

  def i(y:B) = y.toString()

  def main(args: Array[String]) {
    fa(h)
    fb(h)  //passing a function of type A->String
           //to a function expecting a B->String

//  fa(i) //passing a function of type B->string to 
          //a function expecting an A->string. Type error.
    fb(i) 
  }
}


//This contains a simple example of inheritance in Scala

//All class inherit from Object, which defines the toString() method.

class A(x: Int, y: String) {
  val value = x
  val name = y

//To override a method of the parent class, you need to use the
//"override" keyword.
  override def toString(): String = value + name
}

//Note the use of parameters to the class, similar the parameters
//to a constructor in Java
class B(a: Int, b: String, c: Int) extends A(a,b) {
  val age = c
  override def toString() = age + (value + name + name)
}


object Prog {

  def f(a: A) { println(a) }

  def main(args: Array[String]) {
    val a = new A(33, "Thirty Three");
    println(a);

    //This illustrates subtyping -- pass a B to a method that expects an A
    val b = new B(22, "Twenty Two", 222);
    f(b);
  }
}

//This code illustrates the use of "case classes" in Scala,
//used much like datatypes and pattern matching in ML.

//A case class is much like an ordinary class, but can be used
//in a "match" clause for pattern matching.  Also, an object
//of a case class can be created without the use of the "new"
//keyword.

abstract class Tree

case class Node(v:Int, l:Tree, r:Tree) extends Tree

case class Leaf(v:Int) extends Tree

case class Empty() extends Tree

object Pat {

  //Note the absence of "new" here, and the similarity with ML
  val myTree = Node(3,Leaf(4),Node(5,Leaf(6),Empty()))

  //printTree will actually be called with an object of one of the 
  //case classes that derive from the abstract class Tree
  def printTree(t: Tree) {
    t match {
      case Node(v,l,r) => print("("); printTree(l); print(v); printTree(r); 
                          print(")");
      case Leaf(v) => print(v);
      case Empty() => ();
    }
  }

  def main(args: Array[String]) { printTree(myTree) }
}

//This is a fairly complete example, showing the use type constraints
//on type variables in generics.

trait CanBeCompared[T] {
  def <(other: T): Boolean;
  def <=(other:T) = <(other) || ==(other)
  def >(other:T) = !(<(other)) && !=(other)
  def >=(other: T) = !(<(other))
}

//This defines a generic tree class such that:
// 1) the type T of the label associated with the node implements 
//    the CanBeCompared[T] trait, so that two labels of type T can
//    be compared to each other, and
// 2) The tree class itself implements CanBeCompared[Tree[T]], so that
//    two trees of type Tree[T] can be compared.

abstract class Tree[T <: CanBeCompared[T]] extends CanBeCompared[Tree[T]]

//This code defines < between two trees, such that T1 < T2 if T1 and T2 have the
//same structure and each label in T1 is less than the corresponding label of T2.
//It makes for a strange definition of > and >=, but the point of this code is
//simply to show how generics and type constrais work in Scala.

case class  Node[T  <: CanBeCompared[T]](v: T, l: Tree[T], r: Tree[T]) extends Tree[T] {
  def <(other: Tree[T]) = other match {
    case Node(ov,ol,or) => (v < ov) && (l < ol) && (r < or)
    case _ => false
  }

  override def toString() = "("+l+")"+ v+"("+r+")"
}

case class  Empty[T <: CanBeCompared[T]]() extends Tree[T] {
  def <(other: Tree[T]) = other match {
    case Empty() => true
    case _ => false
 }

  override def toString() = ""
}

case class  Leaf[T <: CanBeCompared[T]](v: T) extends Tree[T] {
  def <(other: Tree[T]) = other match {
    case Leaf(ov) => v < ov
    case _ => false
  }
  override def toString() = v + ""
}
  

class MyInt(x:Int) extends CanBeCompared[MyInt] {
  val value = x
  def get = x
  def ==(other: MyInt) = x == other.get
  def <(other: MyInt) = x < other.get
  override def toString(): String = x + ""
}



object Prog {

  def compare[T <: CanBeCompared[T]](a: T, b: T) {
    if (a < b)
      println("Yes")
    else
      println("No")
  }

  def main(args: Array[String]) {

    val a = new MyInt(16)
    val b = new MyInt(7)
    //comparing two MyInt's
    compare(a,b)

    
    val x: Tree[MyInt] = Node(new MyInt(6), Node(new MyInt(4),Leaf(new MyInt(3)),Leaf(new MyInt(5))), 
		 Node(new MyInt(8),Leaf(new MyInt(7)),Empty()))

    val y: Tree[MyInt] = Node(new MyInt(16), Node(new MyInt(14),Leaf(new MyInt(13)),Leaf(new MyInt(15))), 
		 Node(new MyInt(18),Leaf(new MyInt(17)),Empty()))

    //comparing two Tree[MyInt]'s
    compare(x,y);

  }
}



//This code illustrates the use of covariant type parameters (using +T syntax)
//for generic classes. 

class One {
  val x = 26
  override def toString() = "One: " + x
}

class Two extends One {
  val y = 99
  override def toString() = "Two: " + x + ", " + y
}


class MyList[+T](lis: List[T]) {
  val l: List[T] = lis

  def get = l

//Notice that cons, since it cannot have a T in contravariant 
//position (such as the type of a function parameter), introduces
//a new type varible B which ranges over the supertypes of T. 
//Since the cons method of MyList[T] is willing to insert x of type B into 
//a list, the resulting list is a MyList[B], not a MyList[T].

  def cons[B >: T](x : B): MyList[B] = new MyList[B](x::lis)

//This version of cons is commented out since it contains a T in 
//contravariant position and would be reject by the compiler.
//(Try uncommenting it and see what the scala compiler says).

//  def cons(x : T): MyList[T] = new MyList[T](x::lis)

  def hd = l match {
    case (x::xs) => x
    case List() => throw new Exception()
  }

  def tl = l match {
    case (x::xs) => xs
    case List() => throw new Exception()
  }

  override def toString() = l + ""
}

object variant {
  
  def foo(l: MyList[One]) {
    println(l);
  }

  def main(args: Array[String]) {
    val l1 = new MyList(List(new One()))
    val hd1: One = l1.hd
    foo(l1)
    println(hd1)
    val l2 = new MyList(List(new Two()))
    foo(l2)
    val hd2: One = l2.hd
    println(hd2)
  }
}


class Contra[-T]() {

  var v: List[Any] = List()
  def insert(x: T) {
    v = x::v
  }


  override def toString() = {
    def elementsToString(l: List[Any]): String = l match {
      case List() => ""
      case (x::xs) => x.toString() + " " + elementsToString(xs)
    }
    "Contra[ " + elementsToString(v) + "]"
  }
}

class A(x: Integer) {
  override def toString() = "A<" + x + ">"
}

class B(x: Integer, y: Integer) extends A(x) {
  override def toString() = "B<" + x + "," + y + ">"
}




object foo {

  def test(m: Contra[B], z: B) {
    m.insert(z)
  }

  def main(args: Array[String]) {
    val l1 = new Contra[B]()
    test(l1, new B(3,4))
    println(l1)

    val l2 = new Contra[A]()
    l2.insert(new A(5))
    test(l2, new B(3,4))   //uses contravariant subtyping in first argument
    println(l2)
  }
}



